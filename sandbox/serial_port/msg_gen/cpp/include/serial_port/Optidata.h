/* Auto-generated by genmsg_cpp for file /home/jesus/ros_workspace/sandbox/serial_port/msg/Optidata.msg */
#ifndef SERIAL_PORT_MESSAGE_OPTIDATA_H
#define SERIAL_PORT_MESSAGE_OPTIDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace serial_port
{
template <class ContainerAllocator>
struct Optidata_ {
  typedef Optidata_<ContainerAllocator> Type;

  Optidata_()
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  Optidata_(const ContainerAllocator& _alloc)
  : x(0.0)
  , y(0.0)
  , z(0.0)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  {
  }

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _z_type;
  float z;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _yaw_type;
  float yaw;


  typedef boost::shared_ptr< ::serial_port::Optidata_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_port::Optidata_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Optidata
typedef  ::serial_port::Optidata_<std::allocator<void> > Optidata;

typedef boost::shared_ptr< ::serial_port::Optidata> OptidataPtr;
typedef boost::shared_ptr< ::serial_port::Optidata const> OptidataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::serial_port::Optidata_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::serial_port::Optidata_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace serial_port

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::serial_port::Optidata_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::serial_port::Optidata_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::serial_port::Optidata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3d5697f0c9e8859325238b57521f8f4e";
  }

  static const char* value(const  ::serial_port::Optidata_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3d5697f0c9e88593ULL;
  static const uint64_t static_value2 = 0x25238b57521f8f4eULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_port::Optidata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "serial_port/Optidata";
  }

  static const char* value(const  ::serial_port::Optidata_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::serial_port::Optidata_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 x\n\
float32 y\n\
float32 z\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
\n\
";
  }

  static const char* value(const  ::serial_port::Optidata_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::serial_port::Optidata_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::serial_port::Optidata_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Optidata_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_port::Optidata_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::serial_port::Optidata_<ContainerAllocator> & v) 
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SERIAL_PORT_MESSAGE_OPTIDATA_H

